upstream vault_masters {
  ip_hash;
{% for master_name in groups['hashistack_masters'] %}
  server {{ master_name }}.{{ public_domain }}:8200;
{% endfor %}
}

upstream consul_masters {
  ip_hash;
{% for master_name in groups['hashistack_masters'] %}
  server {{ master_name }}.{{ public_domain }}:8501;
{% endfor %}
}

upstream nomad_masters {
  ip_hash;
{% for master_name in groups['hashistack_masters'] %}
  server {{ master_name }}.{{ public_domain }}:4646;
{% endfor %}
}

{% if groups['hashistack_minions'] is defined %}
upstream nomad_minions {
  ip_hash;
{% for minion_name in groups['hashistack_minions'] %}
  server {{ minion_name }}.{{ public_domain }}:8080;
{% endfor %}
}
{% endif %}

server {
	listen 80;
  server_name vault.{{ public_domain }};
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl;
  server_name vault.{{ public_domain }};

  ssl_certificate /etc/ssl/private/*.{{ public_domain }}.fullchain.crt;
  ssl_certificate_key /etc/ssl/private/*.{{ public_domain }}.key;

  location / {
      proxy_pass        https://vault_masters/; # The / is important!
      proxy_set_header  X-Script-Name /;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_pass_header Authorization;
  }
}


server {
	listen 80;
  server_name consul.{{ public_domain }};
  return 301 https://$host$request_uri;
}

server {

  listen 443 ssl;
  server_name consul.{{ public_domain }};

  ssl_certificate /etc/ssl/private/*.{{ public_domain }}.fullchain.crt;
  ssl_certificate_key /etc/ssl/private/*.{{ public_domain }}.key;

  location / {
      proxy_pass        https://consul_masters/; # The / is important!
      proxy_pass_header X-Consul-Token;

      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_read_timeout 310s;
      proxy_buffering off;
      # The Upgrade and Connection headers are used to establish
      # a WebSockets connection.
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # The default Origin header will be the proxy address, which
      # will be rejected by Nomad. It must be rewritten to be the
      # host address instead.
      proxy_set_header Origin "${scheme}://${proxy_host}";
  }
}


server {
	listen 80;
  server_name nomad.{{ public_domain }};
  return 301 https://$host$request_uri;
}

# https://learn.hashicorp.com/tutorials/nomad/reverse-proxy-ui

server {

  listen 443 ssl;
  server_name nomad.{{ public_domain }};

  ssl_certificate /etc/ssl/private/*.{{ public_domain }}.fullchain.crt;
  ssl_certificate_key /etc/ssl/private/*.{{ public_domain }}.key;

  location / {
      proxy_pass        https://nomad_masters;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_read_timeout 310s;
      proxy_buffering off;
      # The Upgrade and Connection headers are used to establish
      # a WebSockets connection.
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # The default Origin header will be the proxy address, which
      # will be rejected by Nomad. It must be rewritten to be the
      # host address instead.
      proxy_set_header Origin "${scheme}://${proxy_host}";
  }
}

{% if groups['hashistack_minions'] is defined %}
server {
	listen 80;
  server_name *.{{ public_domain }};
  return 301 https://$host$request_uri;
}

# https://learn.hashicorp.com/tutorials/nomad/reverse-proxy-ui

server {

  listen 443 ssl;
  server_name *.{{ public_domain }};

  ssl_certificate /etc/ssl/private/*.{{ public_domain }}.fullchain.crt;
  ssl_certificate_key /etc/ssl/private/*.{{ public_domain }}.key;

  location / {
      proxy_pass        http://nomad_minions/;
      proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_read_timeout 310s;
      proxy_buffering off;
      proxy_http_version 1.1;
      # The Upgrade and Connection headers are used to establish
      # a WebSockets connection.
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # The default Origin header will be the proxy address, which
      # will be rejected by Nomad. It must be rewritten to be the
      # host address instead.
      proxy_set_header Host $host;
      proxy_set_header Origin "${scheme}://${proxy_host}";
  }
}
{% endif %}

server {
	listen 80;
  server_name grafana.{{ public_domain }};
  return 301 https://$host$request_uri;
}

server {

  listen 443 ssl;
  server_name grafana.{{ public_domain }};

  ssl_certificate /etc/ssl/private/*.{{ public_domain }}.fullchain.crt;
  ssl_certificate_key /etc/ssl/private/*.{{ public_domain }}.key;

  location / {
    proxy_pass        http://localhost:3000; # The / is important!
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header HOST $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass_request_headers on;
  }
}
